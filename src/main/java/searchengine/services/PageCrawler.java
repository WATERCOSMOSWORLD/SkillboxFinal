package searchengine.services;

import org.jsoup.Connection;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
import org.springframework.transaction.annotation.Transactional;
import searchengine.model.*;
import searchengine.repository.PageRepository;
import searchengine.repository.LemmaRepository;
import searchengine.repository.IndexRepository;
import org.apache.lucene.morphology.LuceneMorphology;
import org.apache.lucene.morphology.russian.RussianLuceneMorphology;
import org.apache.lucene.morphology.english.EnglishLuceneMorphology;
import java.io.IOException;
import java.net.URL;
import searchengine.repository.SiteRepository;
import java.time.LocalDateTime;
import java.util.*;
import java.util.concurrent.ConcurrentSkipListSet;
import java.util.concurrent.RecursiveAction;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.util.List;
import org.springframework.context.annotation.Lazy;


@Lazy
public class PageCrawler extends RecursiveAction {
    private static final Logger logger = LoggerFactory.getLogger(PageCrawler.class);
    private final Site site;
    private final String url;
    private final Set<String> visitedUrls;
    private final PageRepository pageRepository;
    @Lazy
    private final IndexingService indexingService;
    private final LemmaRepository lemmaRepository;
    private final IndexRepository indexRepository;
    private final Set<String> visitedPages = new ConcurrentSkipListSet<>();
    private final SiteRepository siteRepository;

    public PageCrawler(Site site,LemmaRepository lemmaRepository,SiteRepository siteRepository,IndexRepository indexRepository, String url, Set<String> visitedUrls, PageRepository pageRepository,@Lazy IndexingService indexingService) {
        this.site = site;
        this.url = url;
        this.visitedUrls = visitedUrls;
        this.pageRepository = pageRepository;
        this.indexingService = indexingService;
        this.indexRepository = indexRepository;
        this.lemmaRepository = lemmaRepository;
        this.siteRepository = siteRepository;
    }

    @Override
    protected void compute() {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–∂–µ –ø–æ—Å–µ—â–µ–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ –ø—Ä–æ–ø—É—Å–∫ URL
        if (!visitedPages.add(url) || shouldSkipUrl(url) || pageRepository.existsByPath(url.replace(site.getUrl(), ""))) {
            return;
        }

        long startTime = System.currentTimeMillis();

        try {
            // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (–æ—Ç 500 –¥–æ 5000 –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥)
            long delay = 500 + (long) (Math.random() * 4500);
            Thread.sleep(delay);

            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —Å–∞–π—Ç–∞
            site.setStatusTime(LocalDateTime.now());
            siteRepository.save(site);

            logger.info("üåç –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É: {}", url);

            // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ Jsoup
            Document document = Jsoup.connect(url)
                    .userAgent("Mozilla/5.0")
                    .referrer("http://www.google.com")
                    .ignoreContentType(true)
                    .get();

            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –∫–æ–¥–µ –æ—Ç–≤–µ—Ç–∞
            String contentType = document.connection().response().contentType();
            int responseCode = document.connection().response().statusCode();

            // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            Page page = new Page();
            page.setPath(url.replace(site.getUrl(), ""));
            page.setSite(site);
            page.setCode(responseCode);

            // –ï—Å–ª–∏ —ç—Ç–æ HTML-—Å—Ç—Ä–∞–Ω–∏—Ü–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏ –∏–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if (contentType.startsWith("text/html")) {
                page.setContent(document.html());
                indexFilesAndImages(document);
            } else if (contentType.startsWith("image/") || contentType.startsWith("application/")) {
                page.setContent("FILE: " + url);
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
            pageRepository.save(page);

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∞–Ω–∞–ª–∏–∑ –ª–µ–º–º)
            processPageContent(page);

            long endTime = System.currentTimeMillis();
            logger.info("‚úÖ [{}] –ü—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–æ –∑–∞ {} –º—Å: {}", responseCode, (endTime - startTime), url);

            // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–¥–∑–∞–¥–∞—á–∏ –¥–ª—è –∏—Ö –æ–±—Ä–∞–±–æ—Ç–∫–∏
            Elements links = document.select("a[href]");
            List<PageCrawler> subTasks = links.stream()
                    .map(link -> cleanUrl(link.absUrl("href")))
                    .filter(link -> link.startsWith(site.getUrl()) && !shouldSkipUrl(link))
                    .map(link -> new PageCrawler(
                            site,                          // –ø–µ—Ä–µ–¥–∞–µ–º site
                            lemmaRepository,               // –ø–µ—Ä–µ–¥–∞–µ–º lemmaRepository
                            siteRepository,                // –ø–µ—Ä–µ–¥–∞–µ–º siteRepository
                            indexRepository,               // –ø–µ—Ä–µ–¥–∞–µ–º indexRepository
                            link,                          // –ø–µ—Ä–µ–¥–∞–µ–º —Å—Å—ã–ª–∫—É –∫–∞–∫ url
                            visitedUrls,                   // –ø–µ—Ä–µ–¥–∞–µ–º visitedUrls
                            pageRepository,                // –ø–µ—Ä–µ–¥–∞–µ–º pageRepository
                            indexingService                // –ø–µ—Ä–µ–¥–∞–µ–º indexingService
                    ))
                    .toList();

            logger.info("üîó –ù–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫: {}", subTasks.size());
            invokeAll(subTasks); // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏

        } catch (IOException e) {
            handleException("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ", e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt(); // –ï—Å–ª–∏ –ø–æ—Ç–æ–∫ –±—ã–ª –ø—Ä–µ—Ä–≤–∞–Ω
            handleException("‚è≥ –ü–æ—Ç–æ–∫ –ø—Ä–µ—Ä–≤–∞–Ω", e);
        }

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —á–∞—Å—Ç—å –∫–æ–¥–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        try {
            if (!shouldProcessUrl()) return;

            applyRequestDelay(); // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
            if (!checkAndLogStopCondition("–ü–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º")) return;

            Connection.Response response = fetchPageContent(); // –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            if (response != null) {
                handleResponse(response);  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
            }
        } catch (IOException | InterruptedException e) {
            handleException(e);
        } finally {
            finalizeIndexing(); // –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é
        }
    }






    private boolean shouldProcessUrl() {
        return checkAndLogStopCondition("–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏") && markUrlAsVisited();
    }

    private void processPageContent() throws IOException, InterruptedException {
        applyRequestDelay();
        if (!checkAndLogStopCondition("–ü–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º")) return;
        Connection.Response response = fetchPageContent();
        if (response != null) {
            processFetchedContent(response);
        }
    }


    private void handleException(Exception e) {
        if (e instanceof InterruptedException) {
            Thread.currentThread().interrupt();
        }
        handleError(new IOException("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã", e));
    }


    private boolean markUrlAsVisited() {
        synchronized (visitedUrls) {
            if (visitedUrls.contains(url)) {
                logger.debug("URL —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {}", url);
                return false;
            }
            visitedUrls.add(url);
        }
        return true;
    }

    private void applyRequestDelay() throws InterruptedException {
        long delay = 500 + new Random().nextInt(4500);
        logger.debug("–ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º: {} ms –¥–ª—è URL: {}", delay, url);
        Thread.sleep(delay);
    }

    private Connection.Response fetchPageContent() throws IOException {
        logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ URL: {}", url);
        Connection.Response response = Jsoup.connect(url)
                .userAgent("Mozilla/5.0 (Windows; U; WindowsNT 5.1; en-US; rv1.8.1.6) Gecko/20070725 Firefox/2.0.0.6")
                .referrer("http://www.google.com")
                .ignoreContentType(true)
                .execute();

        if (response.statusCode() >= 400) {
            logger.warn("–û—à–∏–±–∫–∞ {} –ø—Ä–∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {}", response.statusCode(), url);
            return null;
        }
        return response;
    }

    private void finalizeIndexing() {
        indexingService.checkAndUpdateStatus(site.getUrl());
        logger.info("–ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è URL: {}", url);
    }

    private void handleResponse(Connection.Response response) throws IOException {
        String contentType = response.contentType();
        int statusCode = response.statusCode();
        String path = new URL(url).getPath();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        if (pageRepository.existsByPathAndSiteId(path, site.getId())) {
            logger.info("–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –±—ã–ª–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞: {}", url);
            return;
        }

        // –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç Page
        Page page = new Page();
        page.setSite(site);
        page.setPath(path);
        page.setCode(statusCode);

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if (contentType != null && contentType.startsWith("image/")) {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            page.setContent("Image content: " + contentType);
            pageRepository.save(page);
            logger.info("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è URL: {}", url);
        } else if (contentType != null && contentType.contains("text/html")) {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—ã
            try {
                processPageContent();  // –í—ã–∑–æ–≤ –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                logger.info("HTML-—Å—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è URL: {}", url);
            } catch (InterruptedException e) {
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è InterruptedException
                Thread.currentThread().interrupt();  // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
                logger.error("–ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±—ã–ª–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –¥–ª—è URL: {}", url, e);
            }
        } else {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            page.setContent("Unhandled content type: " + contentType);
            pageRepository.save(page);
            logger.info("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è URL: {}", url);
        }
    }

    private String extractText(Document document) {
        return document.text();
    }


    private Map<String, Integer> lemmatizeText(String text) throws IOException {
        Map<String, Integer> lemmaFrequencies = new HashMap<>();

        LuceneMorphology russianMorph = new RussianLuceneMorphology();
        LuceneMorphology englishMorph = new EnglishLuceneMorphology();

        String[] words = text.toLowerCase().split("\\P{L}+");

        for (String word : words) {
            if (word.length() < 2) continue;

            List<String> normalForms;
            if (word.matches("[–∞-—è—ë]+")) {
                normalForms = russianMorph.getNormalForms(word);
            } else if (word.matches("[a-z]+")) {
                normalForms = englishMorph.getNormalForms(word);
            } else {
                continue;
            }

            for (String lemma : normalForms) {
                lemmaFrequencies.put(lemma, lemmaFrequencies.getOrDefault(lemma, 0) + 1);
            }
        }

        return lemmaFrequencies;
    }


    private void processLinks(Document document) {
        Elements links = document.select("a[href]");
        List<PageCrawler> subtasks = new ArrayList<>();

        for (Element link : links) {
            if (!checkAndLogStopCondition("–ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–æ–∫")) return;

            String childUrl = link.absUrl("href");

            if (!childUrl.startsWith(site.getUrl())) {
                logger.debug("–°—Å—ã–ª–∫–∞ {} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —Å–∞–π—Ç–∞ {}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.", childUrl, site.getUrl());
                continue;
            }

            if (childUrl.startsWith("javascript:")) {
                logger.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ JavaScript —Å—Å—ã–ª–∫–∞: {}", childUrl);
                saveJavaScriptLink(childUrl);
                continue;
            }

            if (childUrl.startsWith("tel:")) {
                logger.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞: {}", childUrl);
                savePhoneLink(childUrl);
                continue;
            }

            String childPath = null;
            try {
                childPath = new URL(childUrl).getPath();
            } catch (Exception e) {
                logger.warn("–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—É—Ç–∏ –∏–∑ URL: {}", childUrl);
            }

            synchronized (visitedUrls) {
                if (childPath != null && !visitedUrls.contains(childPath)) {
                    visitedUrls.add(childPath);
                    subtasks.add(new PageCrawler(
                            site,                          // –æ–±—ä–µ–∫—Ç —Å–∞–π—Ç–∞
                            lemmaRepository,               // —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ª–µ–º–º
                            siteRepository,                // —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å–∞–π—Ç–∞ (–¥–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä)
                            indexRepository,               // —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∏–Ω–¥–µ–∫—Å–æ–≤
                            childUrl,                      // –¥–æ—á–µ—Ä–Ω–∏–π URL
                            visitedUrls,                   // –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ—Å–µ—â–µ–Ω–Ω—ã—Ö URL
                            pageRepository,                // —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å—Ç—Ä–∞–Ω–∏—Ü
                            indexingService                // —Å–µ—Ä–≤–∏—Å –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
                    ));

                    logger.debug("–î–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É: {}", childUrl);
                } else {
                    logger.debug("–°—Å—ã–ª–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: {}", childUrl);
                }
            }
        }
        invokeAll(subtasks);
    }



    private void savePhoneLink(String telUrl) {
        String phoneNumber = telUrl.substring(4);
        if (pageRepository.existsByPathAndSiteId(phoneNumber, site.getId())) {
            logger.info("–¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä {} —É–∂–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.", phoneNumber);
            return;
        }

        Page page = new Page();
        page.setSite(site);
        page.setPath(phoneNumber);
        page.setCode(0);
        page.setContent("–¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä: " + phoneNumber);
        pageRepository.save(page);

        logger.info("–°–æ—Ö—Ä–∞–Ω—ë–Ω —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä: {}", phoneNumber);
    }

    private void saveJavaScriptLink(String jsUrl) {
        if (pageRepository.existsByPathAndSiteId(jsUrl, site.getId())) {
            logger.info("JavaScript —Å—Å—ã–ª–∫–∞ {} —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.", jsUrl);
            return;
        }

        Page page = new Page();
        page.setSite(site);
        page.setPath(jsUrl);
        page.setCode(0);
        page.setContent("JavaScript —Å—Å—ã–ª–∫–∞: " + jsUrl);
        pageRepository.save(page);

        logger.info("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ JavaScript —Å—Å—ã–ª–∫–∞: {}", jsUrl);
    }

    private void handleError(IOException e) {
        logger.warn("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ URL {}: {}", url, e.getMessage());
        Page page = new Page();
        page.setSite(site);
        page.setPath(url);
        page.setCode(0);
        page.setContent("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: " + e.getMessage());
        pageRepository.save(page);
    }

    private boolean checkAndLogStopCondition(String stage) {
        if (!indexingService.isIndexingInProgress()) {
            logger.info("–ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –Ω–∞ —ç—Ç–∞–ø–µ {} –¥–ª—è URL: {}", stage, url);
            return false;
        }
        return true;
    }


    private void processFetchedContent(Connection.Response response) throws IOException {
        String contentType = response.contentType();
        int statusCode = response.statusCode();
        String path = new URL(url).getPath();

        if (pageRepository.existsByPathAndSiteId(path, site.getId())) {
            logger.info("–°—Ç—Ä–∞–Ω–∏—Ü–∞ {} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ.", url);
            return;
        }

        Page page = new Page();
        page.setSite(site);
        page.setPath(path);
        page.setCode(statusCode);

        if (contentType != null && contentType.startsWith("image/")) {
            processImageContent(page, contentType);
        } else if (contentType != null && contentType.contains("text/html")) {
            Document document = response.parse();

        } else {
            processUnknownContent(page, contentType);
        }
    }


    private void processImageContent(Page page, String contentType) {
        page.setContent("Image content: " + contentType);
        pageRepository.save(page);
        logger.info("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {}", url);
    }



    private void processUnknownContent(Page page, String contentType) {
        page.setContent("Unhandled content type: " + contentType);
        pageRepository.save(page);
        logger.info("–ö–æ–Ω—Ç–µ–Ω—Ç —Å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º —Ç–∏–ø–æ–º –¥–æ–±–∞–≤–ª–µ–Ω: {}", url);
    }


    private void indexFilesAndImages(Document document) {
        Elements images = document.select("img[src]");
        Elements files = document.select("a[href]");

        for (var img : images) {
            String imgUrl = cleanUrl(img.absUrl("src"));
            saveMedia(imgUrl, "image");
        }

        for (var file : files) {
            String fileUrl = cleanUrl(file.absUrl("href"));
            if (fileUrl.matches(".*\\.(pdf|docx|xlsx|zip|rar)$")) {
                saveMedia(fileUrl, "file");
            }
        }
    }

    private void saveMedia(String url, String type) {
        Page mediaPage = new Page();
        mediaPage.setPath(url.replace(site.getUrl(), ""));
        mediaPage.setSite(site);
        mediaPage.setCode(200);
        mediaPage.setContent(type.toUpperCase() + ": " + url);
        pageRepository.save(mediaPage);

        logger.info("üìÇ –î–æ–±–∞–≤–ª–µ–Ω {}: {}", type, url);
    }

    private void handleException(String message, Exception e) {
        logger.error("{} {}: {}", message, url, e.getMessage(), e);
        site.setStatus(IndexingStatus.FAILED);
        site.setStatusTime(LocalDateTime.now());
        site.setLastError(message + " " + url + ": " + e.getMessage());
        siteRepository.save(site);
    }

    private String cleanUrl(String url) {
        return url.replaceAll("#.*", "").replaceAll("\\?.*", "");
    }

    private boolean shouldSkipUrl(String url) {
        return url.contains("/basket") || url.contains("/cart") || url.contains("/checkout");
    }

    @Transactional
    public void processPageContent(Page page) {
        try {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            String text = extractTextFromHtml(page.getContent());

            // –õ–µ–º–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
            Map<String, Integer> lemmas = lemmatizeText(text);

            Set<String> processedLemmas = new HashSet<>();
            List<Lemma> lemmasToSave = new ArrayList<>();
            List<Index> indexesToSave = new ArrayList<>();

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–µ–º–º
            for (Map.Entry<String, Integer> entry : lemmas.entrySet()) {
                String lemmaText = entry.getKey();
                int count = entry.getValue();

                logger.info("üî§ –ù–∞–π–¥–µ–Ω–∞ –ª–µ–º–º–∞: '{}', —á–∞—Å—Ç–æ—Ç–∞: {}", lemmaText, count);

                List<Lemma> foundLemmas = lemmaRepository.findByLemma(lemmaText);
                Lemma lemma;

                if (foundLemmas.isEmpty()) {
                    lemma = new Lemma(null, page.getSite(), lemmaText, 0);
                } else {
                    lemma = foundLemmas.get(0);
                }

                if (!processedLemmas.contains(lemmaText)) {
                    lemma.setFrequency(lemma.getFrequency() + 1);
                    processedLemmas.add(lemmaText);
                }

                lemmasToSave.add(lemma);

                Index index = new Index(null, page, lemma, (float) count);
                indexesToSave.add(index);
            }

            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–µ–º–º –∏ –∏–Ω–¥–µ–∫—Å–æ–≤ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
            lemmaRepository.saveAll(lemmasToSave);
            indexRepository.saveAll(indexesToSave);

        } catch (IOException e) {
            // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ IOException –±—ã–ª –±—Ä–æ—à–µ–Ω
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {}", page.getPath(), e);
            // –ú–æ–∂–µ—Ç–µ —Ç–∞–∫–∂–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–±—Ä–æ—Å–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            throw new RuntimeException("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ —Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã", e);
        }
    }

    private String extractTextFromHtml(String html) {
        return Jsoup.parse(html).text();
    }

}

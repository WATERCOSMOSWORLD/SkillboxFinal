package searchengine.services;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.util.HashSet;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import searchengine.config.SitesList;
import searchengine.config.ConfigSite;
import searchengine.model.Site;
import searchengine.model.IndexingStatus;
import searchengine.repository.IndexRepository;
import java.util.concurrent.ForkJoinPool;
import searchengine.repository.LemmaRepository;
import searchengine.repository.PageRepository;
import searchengine.repository.SiteRepository;
import java.time.LocalDateTime;
import java.util.Set;
import java.util.concurrent.ConcurrentSkipListSet;

@Service
public class PageIndexingService {
    private static final Logger logger = LoggerFactory.getLogger(PageIndexingService.class);

    private final PageRepository pageRepository;
    private final SiteRepository siteRepository;
    private final SitesList sitesList;
    private final LemmaRepository lemmaRepository;
    private final IndexRepository indexRepository;

    private final Set<String> visitedPages = new ConcurrentSkipListSet<>();
    private final ForkJoinPool forkJoinPool = new ForkJoinPool();

    public PageIndexingService(PageRepository pageRepository,LemmaRepository lemmaRepository,IndexRepository indexRepository, SiteRepository siteRepository, SitesList sitesList) {
        this.pageRepository = pageRepository;
        this.siteRepository = siteRepository;
        this.sitesList = sitesList;
        this.indexRepository = indexRepository;
        this.lemmaRepository = lemmaRepository;


    }

    public boolean indexPage(String baseUrl) {
        long startTime = System.currentTimeMillis();
        Site site = null;

        try {
            // –ü–æ–ª—É—á–∞–µ–º —Å–∞–π—Ç –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            ConfigSite configSite = getConfigSiteByUrl(baseUrl);
            if (configSite == null) {
                logger.warn("‚ö†Ô∏è –°–∞–π—Ç {} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏!", baseUrl);
                return false;
            }

            // –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ —Å–∞–π—Ç–µ –ø–µ—Ä–µ–¥ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–µ–π
            deleteSiteData(baseUrl);

            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –æ —Å–∞–π—Ç–µ
            site = new Site();
            site.setUrl(baseUrl);
            site.setName(configSite.getName());
            site.setStatus(IndexingStatus.INDEXING);
            site.setStatusTime(LocalDateTime.now());
            site = siteRepository.saveAndFlush(site);

            logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é —Å–∞–π—Ç–∞: {}", baseUrl);
            ForkJoinPool forkJoinPool = new ForkJoinPool();
            forkJoinPool.invoke(new IndexPageSite(
                    site,
                    baseUrl,
                    new HashSet<>(),   // –ü–æ—Å–µ—â–µ–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–ø–µ—Ä–µ–¥–∞–µ–º –ø—É—Å—Ç–æ–π Set)
                    pageRepository,
                    siteRepository,
                    lemmaRepository,
                    indexRepository,
                    logger
            ));


            // üîπ –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ INDEXED
            site.setStatus(IndexingStatus.INDEXED);
            site.setStatusTime(LocalDateTime.now());
            site.setLastError(null);
            siteRepository.save(site);

            long endTime = System.currentTimeMillis();
            logger.info("‚úÖ –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {} —Å–µ–∫. –°–∞–π—Ç –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ INDEXED.", (endTime - startTime) / 1000);
            return true;
        } catch (Exception e) {
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ —Å–∞–π—Ç–∞ {}: {}", baseUrl, e.getMessage(), e);

            if (site != null) {
                site.setStatus(IndexingStatus.FAILED);
                site.setStatusTime(LocalDateTime.now());
                site.setLastError("–û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏: " + e.getMessage());
                siteRepository.save(site);
            }

            return false;
        }
    }

    @Transactional
    private void deleteSiteData(String siteUrl) {
        searchengine.model.Site site = siteRepository.findByUrl(siteUrl);
        if (site != null) {
            Long siteId = (long) site.getId();  // –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ Long –¥–ª—è LemmaRepository

            // 1. –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã index (–ø–æ siteId —á–µ—Ä–µ–∑ page)
            int indexesDeleted = indexRepository.deleteBySiteId(site.getId());

            // 2. –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã lemma (–ø–æ siteId)
            int lemmasDeleted = lemmaRepository.deleteBySiteId(siteId);

            // 3. –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Å–∞–π—Ç–æ–º
            int pagesDeleted = pageRepository.deleteAllBySiteId(site.getId());

            // 4. –£–¥–∞–ª—è–µ–º —Å–∞–º —Å–∞–π—Ç
            siteRepository.delete(site);

            logger.info("–£–¥–∞–ª–µ–Ω–æ {} –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã index.", indexesDeleted);
            logger.info("–£–¥–∞–ª–µ–Ω–æ {} –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã lemma.", lemmasDeleted);
            logger.info("–£–¥–∞–ª–µ–Ω–æ {} –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã page –¥–ª—è —Å–∞–π—Ç–∞ {}.", pagesDeleted, siteUrl);
            logger.info("–°–∞–π—Ç {} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.", siteUrl);
        } else {
            logger.warn("–°–∞–π—Ç {} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.", siteUrl);
        }
    }



    private ConfigSite getConfigSiteByUrl(String url) {
        return sitesList.getSites().stream()
                .filter(site -> site.getUrl().equalsIgnoreCase(url))
                .findFirst()
                .orElse(null);
    }

    // üîπ –ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ö–æ–¥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü —Å–∞–π—Ç–∞



}
